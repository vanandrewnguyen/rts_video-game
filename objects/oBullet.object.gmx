<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sBullet</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
image_speed = IMGSPD;

team = -1;
dmg = 0;
decaySprite = sBulletDecay;
psIndex = -1;
trail = false;

hsp = 0;
vsp = 0;
dir = 0;
spd = 0;

alarm[1] = 120;

laserLife = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create decay effect
if (decaySprite != -1) {
    var inst = instance_create(x,y,oBulletDecay);
    inst.sprite_index = decaySprite;
    inst.image_speed = IMGSPD;
    inst.image_angle = direction;
}

// Exemption for Bomber Bullets - they create splatters of smaller weak bullets
if (sprite_index == sBulletBomber) {
    repeat(4) {
        scrCreateBullet(team, x, y, random(360), 0, 4, 
                        0.2, sBulletRound, sBulletDecay, -1, true);
        scrCreateExplosion(x, y, sExplosionSquareBig, false, 0, 0, 0, 0);
    }
} else if (sprite_index == sBulletSniper) {
    scrCreateExplosion(x, y, sExplosionSquareBig, false, 0, 0, 0, 0);
}else if (sprite_index == sBulletEMP) {
    scrCreateExplosion(x, y, sExplosionSquareBig, false, 0, 0, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy Bullet
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move

hsp += global.timeflow * (lengthdir_x(spd,dir));
vsp += global.timeflow * (lengthdir_y(spd,dir));

// Clamp
hsp = clamp(hsp, -lengthdir_x(spd,dir), lengthdir_x(spd,dir));
vsp = clamp(vsp, -lengthdir_y(spd,dir), lengthdir_y(spd,dir));

if (global.timeflow == 0) {
    hsp = 0;
    vsp = 0;
}

// Update real coord
x += hsp;
y += vsp;

// VFX Bullet Trail
if (scrChance(0.75)) {
    scrCreateBulletTrail(x, y, 2, image_angle, 24);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Freeze
image_index = 1;
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw (Exemption - Laser)
draw_self();

// Laser
if (!instance_exists(oUnitParent)) { exit; }
if (sprite_index == sBulletLaser) {
    if (instance_exists(oLaserBoss)) {
        var inst = instance_nearest(x, y, oLaserBoss);
        if (instance_exists(inst) &amp;&amp; point_distance(x, y, inst.x, inst.y) &lt; 16) {
            image_angle = inst.drawAngle;
        }
    }
    
    var len = 0;
    var maxLen = 512;
    var inc = 4;
    var xx = x+lengthdir_x(len, image_angle);
    var yy = y+lengthdir_y(len, image_angle);
    while (len &lt; maxLen &amp;&amp; !place_meeting(x+lengthdir_x(len, image_angle), 
                                          y+lengthdir_y(len, image_angle), oUnitParent)) {
        xx = x+lengthdir_x(len, image_angle);
        yy = y+lengthdir_y(len, image_angle);
        part_particles_create(global.pSysBelow, xx+random_range(-2,2), yy+random_range(-2,2), 
                              global.partShipEnemyTrail, choose(0,1));
        len += inc;
    }
    if (place_meeting(x+lengthdir_x(len, image_angle), y+lengthdir_y(len, image_angle), oUnitParent)) {
        draw_sprite_ext(sBulletDecay, 1, xx, yy, 1, 1, image_angle, c_white, 1);
        
        scrCreateBullet(team, xx, yy, dir, 4,
                        4, dmg, sBulletRound, sBulletDecay,
                        -1, sBulletTrail);
    }
    draw_set_colour(global.colLightPink);
    scrDrawLightning(x, y, xx, yy, 4, 12, 16, 36);
    draw_set_colour(c_white);
    scrDrawLightning(x, y, xx, yy, 4, 12, 4, 12);
    //draw_set_colour(c_white);
    
    laserLife--;
    if (laserLife &lt;= 0) { instance_destroy(); }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
