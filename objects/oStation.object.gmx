<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sStationTop</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>oUnitParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init

// Control Variables
state = "idle";
unitType = "station";
selected = false;
teamIndex = PLAYERINDEX;
hsp = 0;
vsp = 0;

// Health Variables
hp = 25;
maxHp = hp;
hpDraw = 0;

// Factory Variables
scrInitFactoryData();
scrInitShipData();

// Draw Variables
xScale = 1;
yScale = 1;
rot = 0;
alpha = 1;
bottomXScale = 1;
bottomYScale = 1;
bottomRot = 0; 
hpBarAlpha = 0;
hpBarAlphaTar = 0;
drawAngle = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State Machine

// Finite state machine
switch(state) {
    case "idle":
        scrStationIdle();
    break;
    case "selected":
        scrStationSelect();
    break;
    case "building":
        scrStationBuild();
    break;
}   
scrUnitTakeDamage();
scrReturnSquish(1, 0.1);

// Select
if (mouse_check_button_pressed(mb_left)) {
    if (distance_to_point(mouse_x, mouse_y) &lt; 16) {
        if (state == "selected") {
            // Buy the selected item
            if (global.currency &gt;= factoryBuildIndex[factoryAnimTar, 1]) {
                scrFactoryPurchaseItem();
            } else {
                scrCreateFlashingText("Not enough funds", x, y - 32, 
                                      c_white, global.colDarkPink);
            }
        } else {
            state = "selected";
        }
    } else {
        state = "idle";
    }
}

if (mouse_wheel_down() || mouse_wheel_up()) {
    // Audio
    scrPlayAudio(oAudioCont.audioEmUI, sndButtonPress2, 
                 0.9, 1.1, 0.6, 0.7, x, y, 3);
}


// Update Stats
currentShipHpTar = shipData[factoryAnimTar, 0];
currentShipDmgTar = shipData[factoryAnimTar, 1];
currentShipSpdTar = shipData[factoryAnimTar, 2];
currentShipReloadTar = maxShipReload - shipData[factoryAnimTar, 3];

currentShipHp = lerp(currentShipHp, currentShipHpTar, 0.1);
currentShipDmg = lerp(currentShipDmg, currentShipDmgTar, 0.1);
currentShipSpd = lerp(currentShipSpd, currentShipSpdTar, 0.1);
currentShipReload = lerp(currentShipReload, currentShipReloadTar, 0.1);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oEntityParent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///NULL
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

// Draw self
draw_sprite_ext(sStationBottom, image_index, x, y, 
                bottomXScale, bottomYScale, bottomRot, c_white, alpha);
draw_sprite_ext(sprite_index, image_index, x, y, 
                xScale, yScale, rot, c_white, alpha);

// Freeze time
if (global.timeflow == 1) {
    rot += 0.5;
    bottomRot += -1;
}

// Draw Hp Bar 
hpBarAlpha = lerp(hpBarAlpha, hpBarAlphaTar, 0.1);
hpDraw = lerp(hpDraw, hp, 0.1);
if (state == "selected") {
    hpBarAlphaTar = 1;
    draw_set_alpha(hpBarAlpha);
    draw_set_colour(c_white);
    draw_rectangle(x - 16, y - 36 - 1, x + 16, y - 36 + 2, true);
    var pc = (hpDraw / maxHp) * 100;
    draw_healthbar(x - 16, y - 36, x + 16, y - 36 + 2, pc, 
                   global.colDarkOrange, global.colDarkOrange, global.colDarkOrange, 0, false, false);
    draw_set_alpha(1);
} else { hpBarAlphaTar = 0; }


// Deploy Menu RHS
draw_set_font(fntSma);
if (state == "selected") {
    // Set Input for Animation
    factoryAnimTar += mouse_wheel_up() - mouse_wheel_down();
    factoryAnimTar = clamp(factoryAnimTar, 0, factoryBuildCount-1);
    factoryAnim = scrReachTween(factoryAnim, factoryAnimTar, 12);
    // Toggle scale for icon drawing
    if (abs(factoryAnim - factoryAnimTar) &gt; 0.8) { factoryAnimScale = 1.25; }
    factoryAnimScale = lerp(factoryAnimScale, 1, 0.2);
    
    var fHeight = 12;
    // Loop through items
    for(var i=0;i&lt;factoryBuildCount;i++) {
        var yy = y + (i-factoryAnim) * fHeight;
        var xx = x;
        var xxTar = xx;
        var len = 4;
        var dir = (i-factoryAnimTar)*-24;
        
        // Conditional targeting
        if (i == factoryAnimTar) {
            draw_set_colour(global.colDarkestBlue);
            var strLen = string_width(factoryBuildIndex[i,0]) + string_width("$"+string(factoryBuildIndex[i,1]))
            draw_set_alpha(0.5);
            draw_roundrect(xx + 32 - 4, yy - fHeight, xx + 32 + strLen + 16, yy - fHeight + 16, false);
            draw_set_alpha(1);
            draw_set_colour(c_white);
            xxTar = x + 16 + 24 * sin(current_time/256); 
        } else {
            draw_set_colour(global.colLightBlue);
            xxTar = x;
        }
        xx = lerp(xx, xxTar, 0.1);
        
        // Final Drawing Pass
        // If inputs are nearby target drawn
        if (i+2 &gt; factoryAnimTar &amp;&amp; i-2-1 &lt; factoryAnimTar) {
            draw_text_transformed(xx + 32 + lengthdir_x(len, dir), 
                                  yy - fHeight + lengthdir_y(len, dir), 
                                  factoryBuildIndex[i,0], 1,1, dir);
            var strLen = string_width(factoryBuildIndex[i,0]) + 4;
            if (i == factoryAnimTar) {
                draw_text_transformed(xx + strLen + 32 + lengthdir_x(len, dir), 
                                  yy - fHeight + lengthdir_y(len, dir), 
                                  "$"+string(factoryBuildIndex[i,1]), 1,1, dir);
            }
        }
        draw_sprite_ext(factoryBuildIndex[factoryAnimTar,3], 0, x, y, 
                        factoryAnimScale, factoryAnimScale, 0, c_white, 1);
        //draw_text(xx + 32, yy, factoryBuildIndex[i,0]);
    }
}

// Deploy Menu LHS
if (state == "selected") {
    var leftGap = 40;
    var upGap = 20;
    var width = 48;
    var height = 4;
    var heightGap = 12;
    
    // Sprites
    draw_sprite(sShipStatsIcon, 0, x - leftGap + 8, y - upGap + height/2);
    draw_sprite(sShipStatsIcon, 1, x - leftGap + 8, y - upGap + heightGap + height/2);
    draw_sprite(sShipStatsIcon, 2, x - leftGap + 8, y - upGap + heightGap*2 + height/2);
    draw_sprite(sShipStatsIcon, 3, x - leftGap + 8, y - upGap + heightGap*3 + height/2);
    
    // Bars
    draw_set_colour(c_white);
    var pc1 = (currentShipHp / maxShipHp) * 100;
    draw_healthbar(x - leftGap, y - upGap, 
                   x - leftGap - width, y - upGap + height, pc1,
                   c_white, c_white, c_white, 0, false, false);
    
    draw_set_colour(global.colSatLightBlue);
    var pc2 = (currentShipSpd / maxShipSpd) * 100;
    draw_healthbar(x - leftGap, y - upGap + heightGap, 
                   x - leftGap - width, y - upGap + height + heightGap, pc2,
                   c_white, global.colSatLightBlue, global.colSatLightBlue, 0, false, false);
                   
    draw_set_colour(global.colLightPink);
    var pc3 = (currentShipDmg / maxShipDmg) * 100;
    draw_healthbar(x - leftGap, y - upGap + heightGap*2, 
                   x - leftGap - width, y - upGap + height + heightGap*2, pc3,
                   c_white, global.colLightPink, global.colLightPink, 0, false, false);
                   
    draw_set_colour(global.colLightOrange);
    var pc4 = (currentShipReload / maxShipReload) * 100;
    draw_healthbar(x - leftGap, y - upGap + heightGap*3, 
                   x - leftGap - width, y - upGap + height + heightGap*3, pc4,
                   c_white, global.colLightOrange, global.colLightOrange, 0, false, false);
                   
}

draw_set_colour(c_white);









</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
