<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sMiningPointMask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sMiningPointMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
time = 0;
maxMines = 50;
totalMines = irandom_range(40, maxMines);


// Create a set of asteroids that float around (aesthetics only - does not affect gameplay)
asteroidNumber = irandom_range(3, 5);
for(var i=0;i&lt;asteroidNumber;i++) {
    // Distance
    asteroid[i,0] = random_range(20, 56);
    // Sprites and Index and Starting Angle and Rotation Speed
    asteroid[i,1] = choose(sAsteroidsBig, sAsteroidsMedium, sAsteroidsSmall);
    asteroid[i,2] = irandom(2);
    asteroid[i,3] = random(360);
    asteroid[i,4] = random_range(-0.2,0.2);
    // Orbit Rotation 
    asteroid[i,5] = random_range(-0.3,0.3);
    // Scale
    asteroid[i,6] = random_range(0.8,1);
    asteroid[i,7] = asteroid[i,6];
    asteroid[i,8] = asteroid[i,0];
}

xScale = 1;
yScale = 1;
radAlpha = 0;
radAlphaTar = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death

// Particles and Shake
scrShakeCam(2);
scrCreateExplosion(x, y, sExplosionColour, true, 
                   irandom_range(4,6), 64, 64, sExplosionSquareBig);
scrCreateShipGib(x, y, 0.8, 0.05, 8, random_range(1,4), 0, 360);                   
                   

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy
if (totalMines &lt;= 0) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
if (global.timeflow == 1) { time++; }
var ratio = (totalMines / maxMines);

// Draw Asteroids
for(var i=0;i&lt;asteroidNumber;i++) {
    var angle = asteroid[i,3] + (time * asteroid[i,5]);
    var rot = asteroid[i,3] + (time * asteroid[i,4]);
    var xx = x + lengthdir_x(asteroid[i,0], angle);
    var yy = y + lengthdir_y(asteroid[i,0], angle);
    asteroid[i,0] = asteroid[i,8] * ratio + 32;
    asteroid[i,6] = asteroid[i,7] * ratio + 0.25;
    draw_sprite_ext(asteroid[i,1], asteroid[i,2], xx, yy, 
                    asteroid[i,6]*xScale, asteroid[i,6]*yScale, rot, c_white, 1);
}

// Draw radius
radAlpha = lerp(radAlpha, radAlphaTar, 0.2);
if (instance_exists(oUnitParent)) {
    var inst = instance_nearest(x, y, oUnitParent);
    var dis = point_distance(x, y, inst.x, inst.y);
    if (dis &lt; sprite_width*1.5) { radAlphaTar = 0.75;
    } else { radAlphaTar = 0; }
} else { radAlphaTar = 0; }

draw_set_alpha(radAlpha);
draw_set_colour(c_white);
draw_circle(x, y, sprite_width/2, true);
draw_set_alpha(1);


//draw_text(x, y-32, "mines left: "+string(totalMines));


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
