<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init

state = 0; 
screenSizeIndex = 0;

// Array
menuCursor = 0;
menuItem[0, 0] = "Campaign";
menuItem[1, 0] = "Sandbox";
menuItem[2, 0] = "Options";
menuItem[3, 0] = "Credits";
menuItem[4, 0] = "Exit";

menuItem[0, 1] = "Back";
menuItem[1, 1] = "Options!";
menuItem[2, 1] = "Sound Effects";
menuItem[3, 1] = "Screen Size";
menuItem[4, 1] = "Fullscreen";

menuItem[0, 2] = "Back";
menuItem[1, 2] = "Credits!";
menuItem[2, 2] = "An game by Van Andrew";
menuItem[3, 2] = "Sol System is open source!";
menuItem[4, 2] = "github.com/vanandrewnguyen/rts_video-game";

menuLength = array_height_2d(menuItem);
menuWidth = 64;
menuWidthTar = 64;


// Draw var
t = 0;
mx = room_width/2;
for (var i=0;i&lt;menuLength;i++) {
    my[i] = 0;
}
myTar = room_height/2;
cursorY = 0;
bgY[0] = 0;
bgY[1] = 0;
bgY[2] = 0;




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move menu
// Check keyboard input
if (keyboard_check_pressed(vk_down) || keyboard_check_pressed(ord("S")) ||
    mouse_wheel_down()) {
    if (menuCursor &lt; menuLength-1) { 
        menuCursor++; 
    } else {
        menuCursor = 0;
    } 
    // Audio
    scrPlayAudio(oAudioCont.audioEmUI, sndButtonPress1, 
                 0.9, 1.1, 0.9, 1.1, room_width/2, room_height/2, 3);
}
if (keyboard_check_pressed(vk_up) || keyboard_check_pressed(ord("W")) ||
    mouse_wheel_up()) {
    if (menuCursor &gt; 0) { 
        menuCursor--; 
    } else {
        menuCursor = menuLength-1;
    }
    // Audio
    scrPlayAudio(oAudioCont.audioEmUI, sndButtonPress1, 
                 0.9, 1.1, 0.9, 1.1, room_width/2, room_height/2, 3);
}

// Action
if (keyboard_check_pressed(vk_space) || keyboard_check_pressed(vk_enter) ||
    mouse_check_button_pressed(mb_left)) {
    switch(menuCursor) {
        case 0:
            if (state == 0) {
                // Start Campaign
                scrTransition(rmOverworldMenu, global.colDarkestBlue, true, sTransitionSquareTile);
            } else if (state == 1) {
                // Return to main
                state = 0;
                menuCursor = 2;
            } else if (state == 2) {
                // Return to main
                state = 0;
                menuCursor = 3;
                menuWidthTar = 64;
            }
        break;
        case 1:
            if (state == 0) {
                // Sandbox
                scrTransition(rmArenaSandbox, global.colDarkestBlue, true, sTransitionSquareTile);
            } else if (state == 1) {
                // Toggle ambient sound
            }
        break;
        case 2:
            if (state == 0) {
                // Open options menu
                state = 1;
                menuCursor = 0;
            } else if (state == 1) {
                // Toggle Sound effects
                if (global.canPlayAudio == 1) {
                    global.canPlayAudio = 0;
                    ini_open("user_data.ini");
                    ini_write_real("pref", "audio_sfx", global.canPlayAudio);
                    ini_close();
                } else {
                    global.canPlayAudio = 1;
                    ini_open("user_data.ini");
                    ini_write_real("pref", "audio_sfx", global.canPlayAudio);
                    ini_close();
                }
            }
        break;
        case 3:
            if (state == 0) {
                // Open credits
                state = 2;
                menuCursor = 0;
                menuWidthTar = 128;
            } else if (state == 1) {
                // Toggle screen sizing
                screenSizeIndex++;
                if (screenSizeIndex &gt;= 3) { screenSizeIndex = 0; }
                switch (screenSizeIndex) {
                    case 0:
                        window_set_size(1280, 720);
                    break;
                    case 1:
                        window_set_size(1920, 1080);
                    break;
                    case 2:
                        window_set_size(640, 360);
                    break;
                }
            }
        break;
        case 4:
            if (state == 0) {
                // Exit game
                game_end();
            } else if (state == 1) {
                // Toggle fullscreen
                if (window_get_fullscreen()) {
                    window_set_fullscreen(false);
                } else {
                   window_set_fullscreen(true);
                }
            } else if (state == 2) {
                url_open('https://github.com/vanandrewnguyen/rts_video-game');
            }
        break;
    }
    // Audio
    scrPlayAudio(oAudioCont.audioEmUI, sndButtonPress1, 
                 0.5, 0.6, 0.9, 1.1, room_width/2, room_height/2, 3);
}

// BG
background_alpha[1] = 0.75;
background_alpha[2] = 0.25;
background_alpha[3] = 0.5;
background_alpha[4] = 0.05;
background_alpha[5] = 0.05;

background_hspeed[4] = -0.15;
background_vspeed[4] = -0.1;
background_hspeed[5] = 0.05;
background_vspeed[5] = 0.2;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
t++;

// Draw Rectangle
var bW = 64;
var pad = 16;
var height = 16;
var bgYInc0 = 4*sin(t / 32);
var bgYInc1 = 4*sin(t / 36);
var bgYInc2 = 4*sin(t / 40);
menuWidth = lerp(menuWidth, menuWidthTar, 0.1);
bgY[0] = lerp(bgY[0], room_height, 0.05);
bgY[1] = lerp(bgY[1], room_height, 0.04);
bgY[2] = lerp(bgY[2], room_height, 0.03);
draw_set_colour(c_white);
draw_set_alpha(0.05);
draw_rectangle(mx - bW*2.5 - bgYInc2, 0, mx + bW*2.5 + bgYInc2, bgY[2], false);
draw_rectangle(mx - bW*2 - bgYInc1, 0, mx + bW*2 + bgYInc1, bgY[1], false);
draw_rectangle(mx - bW*1.5 - bgYInc0, 0, mx + bW*1.5 + bgYInc0, bgY[0], false);
draw_set_alpha(0.25);
draw_set_colour(global.colDarkestBlue);
draw_roundrect(mx - menuWidth, my[0] - pad/4, mx + menuWidth, 
               my[menuLength-1] + (menuLength-1)*height + pad*1.25, false);
               
// Draw Menu Items
draw_set_alpha(1.0);
draw_set_font(fntMed);
draw_set_halign(fa_center);

for (var i=0;i&lt;menuLength;i++) {
    draw_set_colour(c_white);
    var xx = mx;
    my[i] = lerp(my[i], myTar, 0.05 - i*0.005);
    var yy = my[i] + i*height;
    // Exemptions
    if (menuItem[i, state] == "Sound Effects") {
        if (global.canPlayAudio == 0) {
            draw_set_colour(global.colDarkPink);
            draw_text(xx + string_width(menuItem[i, state])/2 + 6, yy, "x");
        }
    }
    // Draw Menu Text
    draw_text(xx, yy, menuItem[i, state]);
    
    // Draw Menu Cursor
    cursorY = lerp(cursorY, my[menuCursor] + menuCursor*height, 0.05);
    if (i == menuCursor) {
        var cxr = xx + string_width(menuItem[i, state])*0.75 + 4*sin(t / 32);
        var cxl = xx - string_width(menuItem[i, state])*0.75 - 4*sin(t / 32);
        draw_text(cxr, cursorY, "&lt;");
        draw_text(cxl, cursorY, "&gt;");
    }
}







</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
