<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sShipMaskSmall</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init

owner = -1;

t = 0;
radiusOrigin = 32;
radiusTar = radiusOrigin;
active = true;
alpha = 0;
alphaTar = 0.5;
damageThreshold = 1;

arrayLen = 32;
for (var i=0;i&lt;arrayLen;i++) {
    xx[i] = 0; 
    yy[i] = 0;
    len[i] = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Toggle
active = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Follow
t++;
if (instance_exists(owner)) {
    x = owner.x;
    y = owner.y;
} else { instance_destroy(); }

if (active) { 
    alphaTar = 0.4  + 0.025*sin(t/48); 
    radiusTar = radiusOrigin + 2*sin(t/32); 
    if (instance_exists(owner)) {
        // Heal itself
        if (owner.hp &lt; owner.maxHp &amp;&amp; global.timeflow == 1) {
            owner.hp += 0.01;
        }
    }
} else { alphaTar = 0.2; } //radiusTar = radiusOrigin*0.8; }

// Take the hit
if (instance_exists(oBullet) &amp;&amp; instance_exists(owner)) {
    var inst = instance_nearest(x, y, oBullet);
    var dis = point_distance(x, y, inst.x, inst.y);
    if (instance_exists(inst)) {
        if (dis &lt;= radiusOrigin &amp;&amp; inst.team != owner.teamIndex) {
            active = false;
            alarm[0] = 60;
            repeat(random_range(2, 4)) {
                part_particles_create(global.pSysBelow, 
                                      inst.x + random_range(-8, 8), 
                                      inst.y + random_range(-8, 8), 
                                      global.partShipEnemyTrail, 1);
            }
            
            // Audio
            scrPlayAudio(oAudioCont.audioEmImpact, sndShipHitShield, 
                         0.9, 1.1, 0.6, 0.7, x, y, 6);
            
            // Destroy the Bullet
            if (inst.dmg &lt;= damageThreshold &amp;&amp; active) {
                with(inst) { 
                    instance_destroy(); 
                }
            }  
        } 
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

alpha = lerp(alpha, alphaTar, 0.1);

draw_primitive_begin(pr_trianglefan);
// Edges cases
if (len[0] &gt; radiusOrigin+1 || len[0] &lt; radiusOrigin-1) {
    len[arrayLen-1] += (len[0] - len[arrayLen-1])/4;
}
if (len[arrayLen-1] &gt; radiusOrigin+1 || len[arrayLen-1] &lt; radiusOrigin-1) {
    len[0] += (len[arrayLen-1] - len[0])/4;
}

    
for (var i=0;i&lt;arrayLen;i++) {
    // Create a series of circular point
    var angleInc = 360 / radiusOrigin;
    len[i] = lerp(len[i], radiusTar, 0.1);
    xx[i] = lerp(xx[i], lengthdir_x(len[i], angleInc*i), 0.1); 
    yy[i] = lerp(yy[i], lengthdir_y(len[i], angleInc*i), 0.1); 
    
    // Apply some kind of force relationship between adjacent points
    if (i &gt; 0 &amp;&amp; i &lt; arrayLen-1) {
        if (len[i-1] &gt; radiusOrigin+1 || len[i-1] &lt; radiusOrigin-1) {
            len[i] += (len[i-1] - len[i])/4;
        }
        if (len[i+1] &gt; radiusOrigin+1 || len[i+1] &lt; radiusOrigin-1) {
            len[i] += (len[i+1] - len[i])/4;
        }
    }
    
    // Set Drawing Var
    var finalX = x+xx[i];
    var finalY = y+yy[i];
    var jump = 8;
    
    // Collision with Bullet
    if (instance_exists(oBullet) &amp;&amp; global.timeflow == 1) {
        var inst = instance_position(finalX, finalY, oBullet);
        if (inst != noone) {
            var dis = point_distance(x, y, inst.x, inst.y);
            if (dis &lt; len[i]) {
                len[i] += jump;
            } else {
                len[i] -= jump*1.5;
            }   
        }
    }   
    
    // Clamp
    len[i] = clamp(len[i], radiusOrigin-jump*3, radiusOrigin+jump*2);
    
    // Drawing
    draw_set_alpha(alpha);
    draw_set_colour(global.colLightPurple);
    draw_vertex(finalX, finalY);
    draw_circle(finalX, finalY, 1, true);
    draw_set_alpha(1);
}
draw_primitive_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
