<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oEntityParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init

// Use unit scripts
scrUnitInit(PLAYERINDEX, 3, 2, 0.25, 0.15, 2,
            96, 60, 8, 8, 1, sBullet, true, "parent");


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death 

// Particles and Shake
scrShakeCam(2);
scrCreateExplosion(x, y, sExplosionSquareBig, false, 
                   irandom_range(2,3), 32, 32, sExplosionSquareBig);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move

// Use finite state machine
if (global.timeflow == 1) {
    switch(state) {
        case "idle":
            scrUnitIdle();
        break;
        case "move":
            scrUnitMove();
        break;
    }   
    x += hsp; 
    y += vsp; 
}

// Mouse check for movement
if (selected) {
    if (mouse_check_button_pressed(mb_right) and instance_exists(oMouse)) {
        scrMouseSetMovement(oMouse.mouseMode);
        // Set initial position for line
        oMouse.plx = mouse_x;
        oMouse.ply = mouse_y;
    }
    if (mouse_check_button(mb_right) and instance_exists(oMouse) and oMouse.mouseMode == "targetLine") {
        // Special Case for Line
        with(oUnitParent) { selectionIndex = 0; } 
        // Set state and target
        atTarget = false;
        state = "move";
        with(oMouse) {
            // Get new end position
            var counter = 0;
            var instanceIndex;
            
            // Loop through instances and grab id's of those who are selected to new array
            for (var i=0;i&lt;instance_number(oUnitParent);++i) {
                var inst = instance_find(oUnitParent, i);
                if (inst != noone) {
                    if (inst.selected == true) {
                        instanceIndex[counter] = inst.id;
                        inst.selectionIndex = counter;
                        counter++;
                    }
                }   
            }   
            
            // Get distances
            var hDis = round(plx - mouse_x);
            var vDis = round(ply - mouse_y)
            var hDisStep = hDis / counter;
            var vDisStep = vDis / counter;
                                
            // Loop through new array and construct new positions trig
            for (var j=0;j&lt;counter;j++) {
                var inst = instanceIndex[j];
                var xx = mouse_x + hDisStep * inst.selectionIndex;
                var yy = mouse_y + vDisStep * inst.selectionIndex;
                inst.moveTargetX = xx;
                inst.moveTargetY = yy;   
            }
        }
    }
}
if (mouse_check_button(mb_left)) {
    scrToggleSelect(oMouse.px, oMouse.py, mouse_x, mouse_y);
}
// If middle click, select all of the same type
if (mouse_check_button(mb_middle) &amp;&amp; distance_to_point(mouse_x, mouse_y) &lt; 4) {
    var instNum = instance_number(oUnitParent);
    with (oUnitParent) { selected = false; }
    for(var i=0;i&lt;instNum;i++) {
        var inst = instance_find(oUnitParent, i);
        if (inst.unitType == unitType) {
            with (inst) { selected = true; }
        }
    }
}


// Clamp within room bounds
x = clamp(x, 0, room_width); 
y = clamp(y, 0, room_height); 

// Damage
scrUnitTakeDamage();

// Combat
if (instance_exists(oEnemyParent)) {
    var inst = instance_nearest(x, y, oEnemyParent);
    var dis = point_distance(x, y, inst.x, inst.y);
    var dir = point_direction(x, y, inst.x, inst.y);
    if (dis &lt; attackRange) {
        // Firing
        inCombat = true;
        unitAngle = dir;
        scrUnitChargeFire();
    } else { inCombat = false; }
} else { inCombat = false; }

// Sprite work
scrReturnSquish(1, 0.2);

// Particles
if (abs(hsp) &gt;= (maxSpd/4) || abs(vsp) &gt;= (maxSpd/4)) {
    part_particles_create(global.pSysBelow, x, y, global.partShipTrail, choose(0,1));
}













</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

// Draw Self
drawAngle += sin(degtorad(unitAngle - drawAngle)) * (15 - weight);
draw_sprite_ext(sprite_index, image_index, x, y, xScale, yScale, drawAngle-90, c_white, alpha);

if (selected) {
    draw_set_colour(c_white);
    draw_set_alpha(0.25);
    draw_circle(x, y, sprite_width/2, true);
    draw_set_alpha(1);
}

// Draw Target
if (!atTarget) {
    draw_sprite(sTargetBase, 0, moveTargetX, moveTargetY);
}

// Draw Hp Bar 
hpBarAlpha = lerp(hpBarAlpha, hpBarAlphaTar, 0.1);
hpDraw = lerp(hpDraw, hp, 0.1);
if (inCombat == true || selected == true) {
    hpBarAlphaTar = 1;
    draw_set_alpha(hpBarAlpha);
    draw_set_colour(c_white);
    draw_rectangle(x - 16, y - 16 - 1, x + 16, y - 16 + 2, true);
    var pc = (hpDraw / maxHp) * 100;
    draw_healthbar(x - 16, y - 16, x + 16, y - 16 + 2, pc, 
                   global.colDarkOrange, global.colDarkOrange, global.colDarkOrange, 0, false, false);
    draw_set_alpha(1);
} else { hpBarAlphaTar = 0; }

/*
//draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,false);
draw_set_font(fntSma);
draw_text(x, y - 32, string(selectionIndex));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
